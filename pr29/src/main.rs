/*Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
    22=4, 23=8, 24=16, 25=32
    32=9, 33=27, 34=81, 35=243
    42=16, 43=64, 44=256, 45=1024
    52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100? */

extern crate primal;

mod factorize;

use crate::factorize::factorize;

fn main() {
    let mut full_list : Vec<u64> = Vec::new();
    for a in 2..=100 {
        for b in 2..=100 {
            // We are dealing with a^b = prod
            //  Factor the base (a)
            //  If the factorization consists of more than one of a single base number
            //  SCRATCH THIS: Need even amounts of each set of factors (100 -> 2,2,5,5 -> 10^2)
            //  (e.g. 2 -> 2 = False; 4 -> 2,2 = True; 12 -> 2,2,3 = False),
            //  then we can do some optimizations,
            //  otherwise we simply add prod to the list
            println!("Processing: {}^{}", a, b);
            full_list.push((a as u64).pow(b as u32));
        }
    }
    full_list.sort();
    full_list.dedup();
    println!("Full list is {:?} and consists of {} numbers", full_list, full_list.len());






    // for to_factorize in (1 as usize)..(10_000 as usize)
    // {
    //     let factorization : Vec<usize> = factorize(&to_factorize);
    //     println!("Factorization: {:?} from {}", factorization, to_factorize);
    // }



}
